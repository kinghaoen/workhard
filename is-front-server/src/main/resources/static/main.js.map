{"version":3,"sources":["./src/app/app.inteceptor.ts","./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import {HttpClient, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from \"@angular/common/http\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {Observable} from \"rxjs\";\r\nimport {tap} from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class RefreshInterceptor implements HttpInterceptor{\r\n\r\n  constructor(private http : HttpClient) {\r\n    console.log(\"进入RefreshInterceptor\")\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return next.handle(req).pipe(\r\n\r\n      tap(\r\n        ()=>{},\r\n        error => {\r\n          console.log(error);\r\n          if(error.status === 500 && error.error.message === \"refresh fail\"){\r\n            //方案一 refresh_token也失效了 直接退出 重新登录\r\n            //this.logout();\r\n\r\n            //方案二 refresh_token也失效了 看看认证服务器的session失效没有 没有失效 就能重新获取一个token\r\n            window.location.href=\"http://127.0.0.1:7777/oauth/authorize?\"\r\n              +\"client_id=front-server\"\r\n              +\"&redirect_uri=http://127.0.0.1:8080/oauth/callback\"\r\n              +\"&response_type=code\"\r\n              +\"&state=index.html\";\r\n          }\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  //方案一\r\n  // logout() {\r\n  //   this.http.get(\"logout\").subscribe(\r\n  //     ()=>{\r\n  //       alert(\"登录超时，请重新登录\");\r\n  //       window.location.href=\"http://127.0.0.1:7777/logout?redirect_uri=http://127.0.0.1:8080\";\r\n  //     }\r\n  //   )\r\n  // }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = '前端服务器';\n  authenticated = false;\n  // credentials = {username: '192168092161547461069282',password: '123456'};\n  order = {\n    id: String,\n    price: String\n  };\n\n  constructor(private http : HttpClient) {\n    this.http.get(\"me\").subscribe(\n      data=>{\n        if(data){\n          this.authenticated = true;\n          console.log('前端服务器获取到的token：'+data)\n        }\n        //如果没有登录\n        if(!this.authenticated){\n          //直接跳转到认证中心提供的登录页面\n          window.location.href=\"http://127.0.0.1:7777/oauth/authorize?\"\n            +\"client_id=front-server\"\n            +\"&redirect_uri=http://127.0.0.1:8080/oauth/callback\"\n            +\"&response_type=code\"\n            +\"&state=index.html\";\n        }\n      }\n    )\n  }\n\n/*\n  login(){\n      this.http.post(\"login\",this.credentials).subscribe(\n        ()=>{\n          this.authenticated = true;\n        },() => {\n          console.log(\"登录失败\")\n        }\n      )\n  }\n*/\n\n  getOrder() {\n    this.http.get(\"api/order/order/1\").subscribe(\n      data=>{\n        console.log(data)\n        // @ts-ignore\n        this.order = data;\n      },(error) => {\n        console.log(\"登录失败\"+error)\n      }\n    )\n  }\n\n  logout() {\n    this.http.get(\"logout\").subscribe(\n      ()=>{\n        //todo？ 是否是7777里的logout 还是6666认证中心里的logout\n        //fix 确认7777是认证中心端口号 8888是网关端口号\n        window.location.href=\"http://127.0.0.1:7777/logout?redirect_uri=http://127.0.0.1:8080\";\n        // this.authenticated = false;\n      },() => {\n        console.log(\"退出失败\")\n      }\n    )\n  }\n}\n","<div [hidden]=\"!authenticated\" style=\"text-align: center\">\n  <h1>\n    Welcome to {{ title }}\n  </h1>\n  <button (click)=\"getOrder()\" type=\"button\" class=\"btn btn-primary\">点击获取订单</button>\n  <p>id : {{order.id}}</p>\n  <p>price : {{order.price}}</p>\n\n  <button (click)=\"logout()\" type=\"button\" class=\"btn btn-primary\">退出</button>\n</div>\n\n<!--<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-4\"></div>\n    <div class=\"col-4\">\n\n      <div [hidden]=\"authenticated\" style=\"align-content: center\">\n        <p style=\"color: #df5000\">please login</p>\n        <form role=\"form\" (submit)=\"login()\">\n          <div class=\"form-group\">\n            <label for=\"username\">Username:</label>\n            <input type=\"text\" class=\"form-control\" id=\"username\" name=\"username\" [(ngModel)]=\"credentials.username\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\">Password:</label>\n            <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" [(ngModel)]=\"credentials.password\">\n          </div>\n\n          <button type=\"submit\" class=\"btn btn-primary\">Login</button>\n        </form>\n      </div>\n\n    </div>\n    <div class=\"col-4\"></div>\n  </div>\n</div>-->\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport {FormsModule} from \"@angular/forms\";\nimport {HTTP_INTERCEPTORS, HttpClientModule} from \"@angular/common/http\";\nimport {RefreshInterceptor} from \"./app.inteceptor\";\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: RefreshInterceptor, multi: true }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}